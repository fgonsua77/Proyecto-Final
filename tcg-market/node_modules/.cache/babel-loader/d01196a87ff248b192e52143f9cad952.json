{"ast":null,"code":"import * as AT from \"./authTypes\";\nimport axios from \"axios\";\nconst AUTH_URL = \"http://localhost:8080/apiuser/login\";\nexport const authenticateUser = (username, password) => async dispatch => {\n  dispatch(loginRequest());\n\n  try {\n    const response = await axios.post(AUTH_URL, {\n      username: username,\n      password: password\n    });\n    localStorage.setItem(\"jwtToken\", response.data.access_token);\n    localStorage.setItem(\"user\", response.data.user);\n    localStorage.setItem(\"email\", response.data.email);\n    localStorage.setItem(\"nombre\", response.data.nombre);\n    localStorage.setItem(\"id\", response.data.id);\n    dispatch(success({\n      username: response.data.name,\n      isLoggedIn: true\n    }));\n    return Promise.resolve(response.data);\n  } catch (error) {\n    dispatch(failure());\n    return Promise.reject(error);\n  }\n};\nexport function parseJwt(token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\n;\nexport const logoutUser = () => {\n  return dispatch => {\n    dispatch(logoutRequest());\n    localStorage.removeItem(\"jwtToken\");\n    dispatch(success({\n      username: \"\",\n      isLoggedIn: false\n    }));\n  };\n};\n\nconst loginRequest = () => {\n  return {\n    type: AT.LOGIN_REQUEST\n  };\n};\n\nconst logoutRequest = () => {\n  return {\n    type: AT.LOGOUT_REQUEST\n  };\n};\n\nconst success = isLoggedIn => {\n  return {\n    type: AT.SUCCESS,\n    payload: isLoggedIn\n  };\n};\n\nconst failure = () => {\n  return {\n    type: AT.FAILURE,\n    payload: false\n  };\n};","map":{"version":3,"sources":["C:/Users/Morphem/Documents/Proyecto-Final/tcg-market/src/Services/user/auth/authActions.js"],"names":["AT","axios","AUTH_URL","authenticateUser","username","password","dispatch","loginRequest","response","post","localStorage","setItem","data","access_token","user","email","nombre","id","success","name","isLoggedIn","Promise","resolve","error","failure","reject","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","logoutUser","logoutRequest","removeItem","type","LOGIN_REQUEST","LOGOUT_REQUEST","SUCCESS","payload","FAILURE"],"mappings":"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","sourcesContent":["import * as AT from \"./authTypes\";\r\nimport axios from \"axios\";\r\n\r\nconst AUTH_URL = \"http://localhost:8080/apiuser/login\";\r\n\r\nexport const authenticateUser = (username, password) => async (dispatch) => {\r\n  dispatch(loginRequest());\r\n  try {\r\n    const response = await axios.post(AUTH_URL, {\r\n      username: username,\r\n      password: password,\r\n    });\r\n    localStorage.setItem(\"jwtToken\", response.data.access_token);\r\n    localStorage.setItem(\"user\", response.data.user);\r\n    localStorage.setItem(\"email\", response.data.email);\r\n    localStorage.setItem(\"nombre\", response.data.nombre);\r\n    localStorage.setItem(\"id\", response.data.id);\r\n    dispatch(success({ username: response.data.name, isLoggedIn: true }));\r\n    return Promise.resolve(response.data);\r\n  } catch (error) {\r\n    dispatch(failure());\r\n    return Promise.reject(error);\r\n  }\r\n};\r\nexport function parseJwt (token) {\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n  }).join(''));\r\n\r\n  return JSON.parse(jsonPayload);\r\n};\r\nexport const logoutUser = () => {\r\n  return (dispatch) => {\r\n    dispatch(logoutRequest());\r\n    localStorage.removeItem(\"jwtToken\");\r\n    dispatch(success({ username: \"\", isLoggedIn: false }));\r\n  };\r\n};\r\n\r\nconst loginRequest = () => {\r\n  return {\r\n    type: AT.LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nconst logoutRequest = () => {\r\n  return {\r\n    type: AT.LOGOUT_REQUEST,\r\n  };\r\n};\r\n\r\nconst success = (isLoggedIn) => {\r\n  return {\r\n    type: AT.SUCCESS,\r\n    payload: isLoggedIn,\r\n  };\r\n};\r\n\r\nconst failure = () => {\r\n  return {\r\n    type: AT.FAILURE,\r\n    payload: false,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}