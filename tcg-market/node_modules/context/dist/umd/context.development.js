(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.context = {}));
}(this, (function (exports) { 'use strict';

  var assign = Object.assign;

  function isFunction(value) {
      return typeof value === 'function';
  }

  function optionalFunctionValue(value) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
      }
      return isFunction(value) ? value.apply(void 0, args) : value;
  }

  function defaultTo(callback, defaultValue) {
      var _a;
      return (_a = optionalFunctionValue(callback)) !== null && _a !== void 0 ? _a : defaultValue;
  }

  /**
   * Throws a timed out error.
   */
  function throwError(devMessage, productionMessage) {
      throw new Error(devMessage );
  }

  // eslint-disable-next-line max-lines-per-function
  function createContext(init) {
      var storage = { ancestry: [] };
      return {
          bind: bind,
          run: run,
          use: use,
          useX: useX
      };
      function useX(errorMessage) {
          var _a;
          return ((_a = storage.ctx) !== null && _a !== void 0 ? _a : throwError(defaultTo(errorMessage, 'Context was used after it was closed')));
      }
      function run(ctxRef, fn) {
          var _a;
          var parentContext = use();
          var out = assign({}, parentContext ? parentContext : {}, (_a = optionalFunctionValue(init, ctxRef, parentContext)) !== null && _a !== void 0 ? _a : ctxRef);
          var ctx = set(Object.freeze(out));
          storage.ancestry.unshift(ctx);
          var res = fn(ctx);
          clear();
          return res;
      }
      function bind(ctxRef, fn) {
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore - this one's pretty hard to get right
          var returnedFn = function () {
              var runTimeArgs = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  runTimeArgs[_i] = arguments[_i];
              }
              return run(ctxRef, function () {
                  return fn.apply(void 0, runTimeArgs);
              });
          };
          return returnedFn;
      }
      function use() {
          return storage.ctx;
      }
      function set(value) {
          return (storage.ctx = value);
      }
      function clear() {
          var _a;
          storage.ancestry.shift();
          set((_a = storage.ancestry[0]) !== null && _a !== void 0 ? _a : null);
      }
  }

  exports.createContext = createContext;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
